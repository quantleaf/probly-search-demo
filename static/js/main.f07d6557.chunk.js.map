{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["lastSearchEvent","problySearch","search","query","method","a","results","JSON","parse","drawResult","result","style","display","alignItems","flexDirection","fontStyle","Table","responsive","marginTop","map","r","idx","document","id","score","text","Loader","props","state","loading","documentsAdded","totalDocumentsToAdd","console","log","c","this","then","p","Papa","process","download","delimiter","complete","setState","data","length","i","name","save","Promise","resolve","reject","setTimeout","React","Component","searchTypes","value","App","useState","resultChange","searchType","setSearchTypeValue","searchChange","event","type","target","className","flexWrap","href","rel","maxWidth","width","placeholder","marginLeft","onChange","ButtonGroup","toggle","radio","ToggleButton","variant","checked","e","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f07d6557.chunk.js","sourcesContent":["\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.scss';\r\nimport { ToggleButton, Table, ButtonGroup } from 'react-bootstrap';\r\nimport * as Papa from \"papaparse\";\r\n\r\nconst problySearch = import('@quantleaf/probly-search-demo');\r\ninterface Doc {\r\n  id: number,\r\n  text: string\r\n}\r\ninterface Result {\r\n  score: number,\r\n  document: Doc\r\n}\r\n\r\ntype SearchType = 'bm25' | 'zero-to-one';\r\nconst search = async (query: string, method: SearchType): Promise<Result[]> => {\r\n  let results = (await problySearch).search(query, method, 10);\r\n  return JSON.parse(results);\r\n}\r\n\r\nconst drawResult = (result: Result[]) => {\r\n  return <div style={{ display: 'flex', alignItems: 'start', flexDirection: 'column' }}>\r\n    <span style={{ fontStyle: \"italic\" }}>Return at most 10 results</span>\r\n    <Table responsive style={{ marginTop: '20px' }}>\r\n      <thead>\r\n        <tr>\r\n          <th>Result</th>\r\n          <th>Score</th>\r\n          <th>Document</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          result.map((r, idx) => {\r\n            return <tr key={idx} >\r\n              <td>{r.document.id}</td>\r\n              <td>{r.score}</td>\r\n              <td>{r.document.text}</td>\r\n            </tr>\r\n          })\r\n        }\r\n      </tbody>\r\n    </Table>\r\n  </div>\r\n\r\n}\r\n\r\ninterface LoaderProps {\r\n  loading: boolean,\r\n  documentsAdded: number,\r\n  totalDocumentsToAdd: number\r\n}\r\nclass Loader extends React.Component<any, LoaderProps> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      documentsAdded: 0,\r\n      totalDocumentsToAdd: 1\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('load once!')\r\n    let c = this;\r\n    problySearch.then((p) => {\r\n      Papa.parse(process.env.PUBLIC_URL +'/recipe_names.csv', { // Only one column, so a little overkill to do papaparse\r\n        download: true,\r\n        delimiter: \"\\n\", // Single column\r\n        complete: async (results) => {\r\n          c.setState({\r\n            documentsAdded: c.state.documentsAdded,\r\n            totalDocumentsToAdd: (results.data as any[]).length\r\n          });\r\n          for (let i = 0; i < (results.data as any[]).length; i++) { \r\n            let name = (results.data as any[])[i][0] as any as string;\r\n            p.save(name);\r\n            if (i % 1000 === 0) // a trick to force rerender\r\n            {\r\n              await new Promise((resolve, reject) => {\r\n                setTimeout(() => {\r\n                  resolve(true);\r\n\r\n                }, 0);\r\n              })\r\n              c.setState({\r\n                loading: true,\r\n                documentsAdded: i,\r\n                totalDocumentsToAdd: (results.data as any[]).length\r\n              });\r\n\r\n            }\r\n          }\r\n          c.setState({\r\n            loading: false,\r\n            documentsAdded: (results.data as any[]).length,\r\n            totalDocumentsToAdd: (results.data as any[]).length\r\n          });\r\n\r\n        }\r\n      });\r\n\r\n    })\r\n  }\r\n  render() {\r\n    if (this.state.loading)\r\n      return <div style={{ fontStyle: 'italic', display: 'inline-flex' }}>Adding documents &nbsp;{this.state.documentsAdded}&nbsp;of&nbsp;{this.state.totalDocumentsToAdd}</div>;\r\n    return <div style={{ fontStyle: 'italic', display: 'inline-flex' }}>Index contains&nbsp;{this.state.totalDocumentsToAdd}&nbsp;documents</div>;\r\n\r\n  }\r\n}\r\nlet lastSearchEvent: any;\r\nconst searchTypes = [\r\n  { name: 'zero-to-one', value: 'zero-to-one' as SearchType },\r\n  { name: 'BM25', value: 'bm25' as SearchType }\r\n];\r\nfunction App() {\r\n  const [result, resultChange] = useState([] as Result[]);\r\n  const [searchType, setSearchTypeValue] = useState('zero-to-one' as SearchType);\r\n  const setSearchTypeValueWithReset = (type: SearchType) => {\r\n    setSearchTypeValue(type)\r\n    if (lastSearchEvent)\r\n      searchChange(lastSearchEvent, type)\r\n\r\n  }\r\n  const searchChange = (event: any, type: SearchType = searchType) => {\r\n    lastSearchEvent = event;\r\n    search(event.target.value, type).then((result) => {\r\n      resultChange(result)\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <header className=\"App-header\">\r\n        <div style={{ display: 'inline-flex', flexWrap: 'wrap' }}>\r\n          Recipe search demo app for&nbsp;\r\n          <a\r\n            href=\"https://github.com/quantleaf/probly-search\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            probly-search\r\n          </a>&nbsp;library\r\n        </div>\r\n        <div>\r\n          <span className=\"App-subheader\">The library is written in Rust and is running entirely in your web browser using web assembly. Source code for this demo can be found <a\r\n            href=\"https://github.com/quantleaf/probly-search-demo\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >here</a></span>.\r\n        </div>\r\n      </header>\r\n      <div style={{ display: 'flex', flexDirection: 'column', maxWidth: '500px', width: '100%', marginTop: '20px' }}>\r\n        <div className=\"App-box\">\r\n          <h5>Search</h5>\r\n          <Loader></Loader>\r\n\r\n          <div className=\"App-row\">\r\n\r\n            <input placeholder=\"Garlic Chicken\" style={{ marginLeft: '20px' }} onChange={searchChange}></input>\r\n            <ButtonGroup toggle style={{ marginLeft: '20px' }}>\r\n              {\r\n                searchTypes.map((radio, idx) => (\r\n                  <ToggleButton\r\n                    key={idx}\r\n                    type=\"radio\"\r\n                    variant=\"secondary\"\r\n                    name=\"radio\"\r\n                    value={radio.value}\r\n                    checked={searchType === radio.value}\r\n                    onChange={(e) => setSearchTypeValueWithReset(e.currentTarget.value as SearchType)}\r\n                  >\r\n                    <span>{radio.name}</span>\r\n                  </ToggleButton>\r\n                ))\r\n              }\r\n            </ButtonGroup>\r\n          </div>\r\n          {\r\n            drawResult(result)\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// fragments\r\n/*\r\n <div className=\"App-box\">\r\n          <h5>Edit index</h5>\r\n          <div className=\"App-row\">\r\n\r\n              <input placeholder=\"My new document\" style={{ marginLeft: '20px'}}></input>\r\n              <Button size=\"sm\" style={{marginLeft: '20px'}}>Add document</Button>\r\n              <Button size=\"sm\" variant = \"danger\" onClick={clear}>Clear index</Button>\r\n          </div>\r\n        </div>\r\n        */","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.scss';\r\nimport './theme.scss';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}