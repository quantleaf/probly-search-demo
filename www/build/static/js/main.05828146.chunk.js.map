{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["lastSearchEvent","problySearch","search","query","method","a","results","JSON","parse","drawResult","result","style","display","alignItems","flexDirection","fontStyle","Table","responsive","marginTop","map","r","idx","document","id","score","text","Loader","props","state","loading","documentsAdded","totalDocumentsToAdd","console","log","c","this","then","p","Papa","download","complete","setState","data","length","i","name","save","Promise","resolve","reject","setTimeout","React","Component","searchTypes","value","App","useState","resultChange","searchType","setSearchTypeValue","searchChange","event","type","target","className","flexWrap","href","rel","maxWidth","width","placeholder","marginLeft","onChange","ButtonGroup","toggle","radio","ToggleButton","variant","checked","e","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05828146.chunk.js","sourcesContent":["\n\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { ToggleButton, Button, Table, ButtonGroup } from 'react-bootstrap';\nimport * as Papa from \"papaparse\";\n\nconst problySearch = import('@quantleaf/probly-search-demo');\ninterface Doc {\n  id: number,\n  text: string\n}\ninterface Result {\n  score: number,\n  document: Doc\n}\n\ntype SearchType = 'bm25' | 'zero-to-one';\nconst search = async (query: string, method: SearchType): Promise<Result[]> => {\n  let results = (await problySearch).search(query, method, 10);\n  return JSON.parse(results);\n}\n\nconst drawResult = (result: Result[]) => {\n  return <div style={{ display: 'flex', alignItems: 'start', flexDirection: 'column' }}>\n    <span style={{ fontStyle: \"italic\" }}>Return at most 10 results</span>\n    <Table responsive style={{ marginTop: '20px' }}>\n      <thead>\n        <tr>\n          <th>Result</th>\n          <th>Score</th>\n          <th>Document</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          result.map((r, idx) => {\n            return <tr key={idx} >\n              <td>{r.document.id}</td>\n              <td>{r.score}</td>\n              <td>{r.document.text}</td>\n            </tr>\n          })\n        }\n      </tbody>\n    </Table>\n  </div>\n\n}\n\ninterface LoaderProps {\n  loading: boolean,\n  documentsAdded: number,\n  totalDocumentsToAdd: number\n}\nclass Loader extends React.Component<any, LoaderProps> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      loading: true,\n      documentsAdded: 0,\n      totalDocumentsToAdd: 1\n    }\n  }\n\n  componentDidMount() {\n    console.log('load once!')\n    let c = this;\n    problySearch.then((p) => {\n      Papa.parse('recipe_names.csv', { // Only one column, so a little overkill to do papaparse\n        download: true,\n        complete: async (results) => {\n          c.setState({\n            documentsAdded: c.state.documentsAdded,\n            totalDocumentsToAdd: (results.data as any[]).length\n          });\n\n          for (let i = 0; i < (results.data as any[]).length; i++) {\n\n            let name = (results.data as any[])[i][0] as any as string;\n            p.save(name);\n            if (i % 1000 === 0) // a trick to force rerender\n            {\n              await new Promise((resolve, reject) => {\n                setTimeout(() => {\n                  resolve(true);\n\n                }, 0);\n              })\n              c.setState({\n                loading: true,\n                documentsAdded: i,\n                totalDocumentsToAdd: (results.data as any[]).length\n              });\n\n            }\n          }\n          c.setState({\n            loading: false,\n            documentsAdded: (results.data as any[]).length,\n            totalDocumentsToAdd: (results.data as any[]).length\n          });\n\n        }\n      });\n\n    })\n  }\n  render() {\n    if (this.state.loading)\n      return <div style={{ fontStyle: 'italic', display: 'inline-flex' }}>Adding documents &nbsp;{this.state.documentsAdded}&nbsp;of&nbsp;{this.state.totalDocumentsToAdd}</div>;\n    return <div style={{ fontStyle: 'italic', display: 'inline-flex' }}>Index contains&nbsp;{this.state.totalDocumentsToAdd}&nbsp;documents</div>;\n\n  }\n}\nlet lastSearchEvent: any;\nconst searchTypes = [\n  { name: 'zero-to-one', value: 'zero-to-one' as SearchType },\n  { name: 'BM25', value: 'bm25' as SearchType }\n];\nfunction App() {\n  const [result, resultChange] = useState([] as Result[]);\n  const [searchType, setSearchTypeValue] = useState('zero-to-one' as SearchType);\n  const setSearchTypeValueWithReset = (type: SearchType) => {\n    setSearchTypeValue(type)\n    if (lastSearchEvent)\n      searchChange(lastSearchEvent, type)\n\n  }\n  const searchChange = (event: any, type: SearchType = searchType) => {\n    lastSearchEvent = event;\n    search(event.target.value, type).then((result) => {\n      resultChange(result)\n    })\n  }\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <div style={{ display: 'inline-flex', flexWrap: 'wrap' }}>\n          Recipe search demo app for&nbsp;\n          <a\n            href=\"https://github.com/quantleaf/probly-search\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            probly-search\n          </a>&nbsp;library\n        </div>\n        <div>\n          <span className=\"App-subheader\">The library is written in Rust and is running entirely in your web browser using web assembly</span>\n        </div>\n      </header>\n      <div style={{ display: 'flex', flexDirection: 'column', maxWidth: '500px', width: '100%', marginTop: '20px' }}>\n        <div className=\"App-box\">\n          <h5>Search</h5>\n          <Loader></Loader>\n\n          <div className=\"App-row\">\n\n            <input placeholder=\"Garlic Chicken\" style={{ marginLeft: '20px' }} onChange={searchChange}></input>\n            <ButtonGroup toggle style={{ marginLeft: '20px' }}>\n              {\n                searchTypes.map((radio, idx) => (\n                  <ToggleButton\n                    key={idx}\n                    type=\"radio\"\n                    variant=\"secondary\"\n                    name=\"radio\"\n                    value={radio.value}\n                    checked={searchType == radio.value}\n                    onChange={(e) => setSearchTypeValueWithReset(e.currentTarget.value as SearchType)}\n                  >\n                    <span>{radio.name}</span>\n                  </ToggleButton>\n                ))\n              }\n            </ButtonGroup>\n          </div>\n          {\n            drawResult(result)\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// fragments\n/*\n <div className=\"App-box\">\n          <h5>Edit index</h5>\n          <div className=\"App-row\">\n\n              <input placeholder=\"My new document\" style={{ marginLeft: '20px'}}></input>\n              <Button size=\"sm\" style={{marginLeft: '20px'}}>Add document</Button>\n              <Button size=\"sm\" variant = \"danger\" onClick={clear}>Clear index</Button>\n          </div>\n        </div>\n        */","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport './theme.scss';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}